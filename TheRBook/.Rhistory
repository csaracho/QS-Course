attach(DATOS_EX)
scatterplot3d(COLESTEROL.0,No.MEDICAMENTOS, COLESTEROL.1, main="Gráfica de dispersión 3D para Colesterol", highlight.3d = TRUE, col.axis = "blue",  col.grid = "lightblue", type = 'h')
## En la gráfica anterior se observan todos los valores de COLESTEROL (antes y después) y en una tercera dimensión el Número de Medicamentos (del 1 al 6). Cada línea terminada en un pequeño círculo representa la variación (antes y después). (Esto se grafica así en lugar de puntos unicamente con la opción type = 'h' para efectos de visibilidad).
## Similarmente para la variable TRIGLICERIDOS:
# 3D Scatterplot
library(scatterplot3d)
attach(DATOS_EX)
scatterplot3d(TRIGLICERIDOS.0,No.MEDICAMENTOS, TRIGLICERIDOS.1, main="Gráfica de dispersión 3D para Triglicéridos", highlight.3d = TRUE, col.axis = "blue",  col.grid = "lightblue", type = 'h')
## Hicimos un esfuerzo final para corroborar lo que se afirma en líneas anteriores y pudimos graficar la dispersión de las dos variables antes destacadas (COLESTEROL Y TRIGLICERIDOS) contra el número de medicamentos (No.MEDICAMENTOS) estos últimos equivalentes a 'tratamientos' según hemos argumentado en este análisis.
## Para ello presentamos la siguiente gráfica, la cual describe del lado izquierdo los niveles de la variable COLESTEROL (antes y después) y del lado derecho la variable TRIGLICERIDOS. Se preparó la gráfica con las mismas coordenadas para facilitar la comparación de la variación observable debida (pensamos) a la influencia del tratamiento (No.MEDICAMENTOS). Asimismo, la gráfica es presentada aprovechando 'boxplot' que es una técnica de uso común en Estadística Descriptiva (ver por ejemplo: http://en.wikipedia.org/wiki/Box_plot).
## Comparacion ANTES DESPUES
trats = as.factor(No.MEDICAMENTOS) ## 'trats' (tratamientos) como factores del No. de medicamentoss
trats
par(mfrow=c(2,2))
plot(trats, COLESTEROL.0, xlab = 'No. Medicamentos',ylab = 'COLESTEROL.0', ylim=c(130,260), col = 'yellow')
grid(col = "lightgray", lty = "dotted",     lwd = par("lwd"), equilogs = TRUE)
plot(trats, TRIGLICERIDOS.0, xlab = 'No. Medicamentos',ylab = 'TRIGLICERIDOS.0', ylim = c(70, 220), col = 'orange')
grid(col = "lightgray", lty = "dotted",     lwd = par("lwd"), equilogs = TRUE)
plot(trats, COLESTEROL.1, xlab = 'No. Medicamentos',ylab = 'COLESTEROL.1', ylim=c(130,260), col = 'yellow')
grid(col = "lightgray", lty = "dotted",     lwd = par("lwd"), equilogs = TRUE)
plot(trats, TRIGLICERIDOS.1, xlab = 'No. Medicamentos',ylab = 'TRIGLICERIDOS.1', ylim = c(70, 220), col = 'orange')
grid(col = "lightgray", lty = "dotted",     lwd = par("lwd"), equilogs = TRUE)
## Se observa de la gráfica anterior el siguiente comportamiento:
```
![alt text](http://metropolis-it.com/files/Statistics/tabla2.png)
```{r}
## Se observa que tres (3) mediciones (dos pequeños círculos en las gráfiucas de COLESTEROL y uno en la gráfica de TRIGLICERIDOS) se desvían marcadamente de los otros datos de la muestra (outliers). Estos pudieron resultar al azar o ser indicativos de un error de medición o que la población tiene una distribución de cola alargada (ver por ejemplo: http://en.wikipedia.org/wiki/Outlier).
## Además, podemos concluir lo siguiente:
```
![alt text](http://metropolis-it.com/files/Statistics/tabla3.png)
```{r}
## Perspectiva clínica de los datos con los resultados obtenidos
## Se realizó un análisis multivariado para entender el comportamiento de los datos del examen.
## Son datos que presentan  diferentes variables que van desde el código de identificación,  edad, talla, escolaridad, cintura, sístole y diástole antes y después de un 'tratamiento indicado', colesterol antes y después de dichos tratamientos así como glucosa y triglicéridos, todos ellos dan información social y clínica de los individuos estudiados, pero ¿Qué nos quieren decir estos datos?
## Hasta ahora tenemos conclusiones donde nos damos cuenta que los parámetros más importantes que explican el fenómeno son Colesterol y Trigliceridos, ambos marcadores de obesidad y/o distintos padecimientos o de su inminencia cuando están por encima de las cifras normales que se presentan en la tabla siguiente.
```
![alt text](http://metropolis-it.com/files/Statistics/tabla4.png)
```{r}
## Cuando estas moléculas se incrementan son también indicadoras de una posible enfermedad cardiovascular ya que tienden a adherirse en las paredes de las venas y arterias, por lo cual resulta de vital importancia tomar en cuenta estos dos factores y los medicamentos que puedan mejorarlo.
## Conclusiones
## El breve análisis presentado cumple con un principal requisito del análisis estadístico: graficar los datos, según recomienda Francis Anscombe (http://en.wikipedia.org/wiki/Anscombe%27s_quartet) y nuestro profesor (Ver Anexo 3 además).
## Por la complejidad y aparente aleatoriedad de los datos del examen se ha utilizado un paquete estadístico de uso común que proporciona prestaciones y es adaptable a diferentes situaciones, ya que es un Lenguaje de Programación a la vez que un Entorno Estadístico. Los resultados del análisis se pueden reproducri fácilmente con el código presentado y estará disponibles en unos días en Internet bajo el portal: http://rpubs.com/csaracho/ . No se revela información de tipo confidencial o reservada por lo que consideramos que su publicación no está limitada.
## Se partió de una análisis multivariado con prácticamente todos las variables (18 de 22) y se fue razonando una mejor selección conforme se fue avanzando en la comprensión del problema a la mano.
## Se detectaron  lo que aparenta ser comportamientos contradictorios de dos variables TRIGLICERIDOS Y COLESTEROL). Se graficó el 'antes' y el 'después' de dichas variables con objeto de razonar si los 'tratamientos' contribuyen o no a 'mejorar' los niveles en las personas, encontrándose que diferentes  tratamientos contribuyen a la mejora (tratamientos 'mas prometedores').
## Se pudo centrar al final el anaĺisis en sólo dos (2) variables de las 22 totales.
## Resalta el hecho de que no existe en el conjunto de datos original una variable que asocie los valores de cada persona con un 'estado de salud' asociado a su vez a un 'tratamiento' (correspondiente al número de medicamentos, que sí se proporciona).
## Se hizo evidente la necesidad de realizar 'exámenes' multivariados en contraste a los univariados o bivariados (lo que se de alguna manera también se articula en el Anexo 2).
## No se encontraron resultados categóricamente concluyentes debido quizás a que los datos no corresponden a personas reales, aunque no disponemos de elementos de información para asegurarlo. En todo caso lo que podría ser recomendable es verificar la fuente de información (los protocolos para tomar las mediciones, por ej.) y si éstos son bien seguidos, volver a realizar la toma de muestras, de tal suerte que las personas reflejen en  el conjunto de mediciones de todas las variables una mejoría diferente con cada diferente tratamiento si ese es el objetivo de un tratamiento (con la dispersión estadística asociada o correspondiente).
##                                  CFS y CAD
```
par(mfrow=c(2,2))
plot(trats, COLESTEROL.0, xlab = 'No. Medicamentos',ylab = 'COLESTEROL.0', ylim=c(130,260), col = 'yellow', pch=16)
grid(col = "lightgray", lty = "dotted",     lwd = par("lwd"), equilogs = TRUE)
plot(trats, TRIGLICERIDOS.0, xlab = 'No. Medicamentos',ylab = 'TRIGLICERIDOS.0', ylim = c(70, 220), col = 'orange', pch=16)
grid(col = "lightgray", lty = "dotted",     lwd = par("lwd"), equilogs = TRUE)
plot(trats, COLESTEROL.1, xlab = 'No. Medicamentos',ylab = 'COLESTEROL.1', ylim=c(130,260), col = 'yellow', pch=16)
grid(col = "lightgray", lty = "dotted",     lwd = par("lwd"), equilogs = TRUE)
plot(trats, TRIGLICERIDOS.1, xlab = 'No. Medicamentos',ylab = 'TRIGLICERIDOS.1', ylim = c(70, 220), col = 'orange', pch=16)
grid(col = "lightgray", lty = "dotted",     lwd = par("lwd"), equilogs = TRUE)
plot(trats, COLESTEROL.0, xlab = 'No. Medicamentos',ylab = 'COLESTEROL.0', ylim=c(130,260), col = 'yellow', cex=1)
grid(col = "lightgray", lty = "dotted",     lwd = par("lwd"), equilogs = TRUE)
plot(trats, TRIGLICERIDOS.0, xlab = 'No. Medicamentos',ylab = 'TRIGLICERIDOS.0', ylim = c(70, 220), col = 'orange', cex=1)
grid(col = "lightgray", lty = "dotted",     lwd = par("lwd"), equilogs = TRUE)
plot(trats, COLESTEROL.1, xlab = 'No. Medicamentos',ylab = 'COLESTEROL.1', ylim=c(130,260), col = 'yellow', cex=1)
grid(col = "lightgray", lty = "dotted",     lwd = par("lwd"), equilogs = TRUE)
plot(trats, TRIGLICERIDOS.1, xlab = 'No. Medicamentos',ylab = 'TRIGLICERIDOS.1', ylim = c(70, 220), col = 'orange', cex=1)
grid(col = "lightgray", lty = "dotted",     lwd = par("lwd"), equilogs = TRUE)
par(mfrow=c(2,2))
plot(trats, COLESTEROL.0, xlab = 'No. Medicamentos',ylab = 'COLESTEROL.0', ylim=c(130,260), col = 'yellow', cex=1)
grid(col = "lightgray", lty = "dotted",     lwd = par("lwd"), equilogs = TRUE)
plot(trats, TRIGLICERIDOS.0, xlab = 'No. Medicamentos',ylab = 'TRIGLICERIDOS.0', ylim = c(70, 220), col = 'orange', cex=1)
grid(col = "lightgray", lty = "dotted",     lwd = par("lwd"), equilogs = TRUE)
plot(trats, COLESTEROL.1, xlab = 'No. Medicamentos',ylab = 'COLESTEROL.1', ylim=c(130,260), col = 'yellow', cex=1)
grid(col = "lightgray", lty = "dotted",     lwd = par("lwd"), equilogs = TRUE)
plot(trats, TRIGLICERIDOS.1, xlab = 'No. Medicamentos',ylab = 'TRIGLICERIDOS.1', ylim = c(70, 220), col = 'orange', cex=1)
grid(col = "lightgray", lty = "dotted",     lwd = par("lwd"), equilogs = TRUE)
par(mfrow=c(2,2))
plot(trats, COLESTEROL.0, xlab = 'No. Medicamentos',ylab = 'COLESTEROL.0', ylim=c(130,260), col = 'yellow', cex=1)
grid(col = "lightgray", lty = "dotted",     lwd = par("lwd"), equilogs = TRUE)
plot(trats, TRIGLICERIDOS.0, xlab = 'No. Medicamentos',ylab = 'TRIGLICERIDOS.0', ylim = c(70, 220), col = 'orange', cex=1)
grid(col = "lightgray", lty = "dotted",     lwd = par("lwd"), equilogs = TRUE)
plot(trats, COLESTEROL.1, xlab = 'No. Medicamentos',ylab = 'COLESTEROL.1', ylim=c(130,260), col = 'yellow', cex=1)
grid(col = "lightgray", lty = "dotted",     lwd = par("lwd"), equilogs = TRUE)
plot(trats, TRIGLICERIDOS.1, xlab = 'No. Medicamentos',ylab = 'TRIGLICERIDOS.1', ylim = c(70, 220), col = 'orange', cex=1)
grid(col = "lightgray", lty = "dotted",     lwd = par("lwd"), equilogs = TRUE)
par(mfrow=c(2,2))
plot(trats, COLESTEROL.0, xlab = 'No. Medicamentos',ylab = 'COLESTEROL.0', ylim=c(130,260), col = 'yellow', cex=1.5)
grid(col = "lightgray", lty = "dotted",     lwd = par("lwd"), equilogs = TRUE)
plot(trats, TRIGLICERIDOS.0, xlab = 'No. Medicamentos',ylab = 'TRIGLICERIDOS.0', ylim = c(70, 220), col = 'orange', cex=1.5)
grid(col = "lightgray", lty = "dotted",     lwd = par("lwd"), equilogs = TRUE)
plot(trats, COLESTEROL.1, xlab = 'No. Medicamentos',ylab = 'COLESTEROL.1', ylim=c(130,260), col = 'yellow', cex=1.5)
grid(col = "lightgray", lty = "dotted",     lwd = par("lwd"), equilogs = TRUE)
plot(trats, TRIGLICERIDOS.1, xlab = 'No. Medicamentos',ylab = 'TRIGLICERIDOS.1', ylim = c(70, 220), col = 'orange', cex=1.5)
grid(col = "lightgray", lty = "dotted",     lwd = par("lwd"), equilogs = TRUE)
par(mfrow=c(1,2))
plot(trats, COLESTEROL.0, xlab = 'No. Medicamentos',ylab = 'COLESTEROL.0', ylim=c(130,260), col = 'yellow')
grid(col = "lightgray", lty = "dotted",     lwd = par("lwd"), equilogs = TRUE)
plot(trats, TRIGLICERIDOS.0, xlab = 'No. Medicamentos',ylab = 'TRIGLICERIDOS.0', ylim = c(70, 220), col = 'orange')
grid(col = "lightgray", lty = "dotted",     lwd = par("lwd"), equilogs = TRUE)
par(mfrow=c(1,2))
plot(trats, COLESTEROL.1, xlab = 'No. Medicamentos',ylab = 'COLESTEROL.1', ylim=c(130,260), col = 'yellow')
grid(col = "lightgray", lty = "dotted",     lwd = par("lwd"), equilogs = TRUE)
plot(trats, TRIGLICERIDOS.1, xlab = 'No. Medicamentos',ylab = 'TRIGLICERIDOS.1', ylim = c(70, 220), col = 'orange')
grid(col = "lightgray", lty = "dotted",     lwd = par("lwd"), equilogs = TRUE)
library(multcomp)
attach(cholesterol)
fit = aov(response ~ trt, data=cholesterol)
summary(fit)
par(las=2)
View(cholesterol)
par(mar=c(5,8,4,2))
plot(tuckeHSD(fit))
plot(tuckeyHSD(fit))
plot(tukeyHSD(fit))
plot(TukeyHSD(fit))
boiling <- read.table("~/TheConciseEncyclopediaStattistics/boiling_point_bar_pressure.txt", header=T, quote="\"")
View(boiling)
attach(boiling)
newrow = c(212.2, 147.8)
boiling = rbind(boiling, newrow)
View(boiling)
View(boiling)
View(boiling)
names(boiling)
boiling_fit = lm(Y_100_log_pressure ~X_boiling_point)
summary(boiling_fit)
boiling_fit$residuals
boiling = rbind(boiling, boiling_fit$residuals)
View(boiling)
boiling <- read.table("~/TheConciseEncyclopediaStattistics/boiling_point_bar_pressure.txt", header=T, quote="\"")
View(boiling)
boiling = rbind(boiling, newrow)
View(boiling)
boiling = cbind(boiling, boiling_fit$residuals)
ei = boiling_fit$residuals
boiling = cbind(boiling, ei)
name(ei) = 'ei'
View(ei)
View(boiling)
boiling_fit$residuals
boiling_fit = lm(Y_100_log_pressure ~X_boiling_point)
ei = boiling_fit$residuals
View(ei)
View(boiling)
Y_100_log_pressure
attach(boiling)
Y_100_log_pressure
boiling_fit = lm(Y_100_log_pressure ~X_boiling_point)
ei = boiling_fit$residuals
ei
ei = (boiling_fit$residuals, name = 'ei')
boiling = cbind(boiling, ei)
View(boiling)
plot(boiling$fitted.values, boiling$residuals)
boiling$fitted.values
boiling_fit = lm(Y_100_log_pressure ~X_boiling_point)
boiling_fit$fitted.values
boiling_fit$residuals
plot(boiling_fit$fitted.values, boiling_fit$residuals)
save(boiling, file = 'boiling')
write.table(boiling, "boiling.txt", sep=",")
boiling2 <- read.csv("~/TheRBook/boiling.txt")
View(boiling2)
library(xlsx)
install.packages("xlsx")
library(foreign)
write.foreign(boiling, "boiling.txt", "boiling.sps", package="SPSS")
qqPlot(boiling$ei, dist="norm")
lbrary(car)
library(car)
qqPlot(boiling$ei, dist="norm")
QQplot(x, y, n = 20, xsf = 4, ysf = 4, main = "qqplot", xlab = deparse(substitute(x)), ylab = deparse(substitute(y)), pch = 16, pcol = "black", shade = "gray", ...)
`days_15-no_robot` <- read.csv("~/Desktop/PROYECTO_TESIS/ProgramasPythonParaTesis/data/day_2011_10_to_24/u_ex111110_to_24-FINAL-2013-02-25-(NODOS-NODUP)-2013-02-25-(RECORRIDOS)-2013-02-25.csv")
viewData(`days_15-no_robot`)
rstudio::viewData(`days_15-no_robot`)
attach(days_15_no_robot)
attach(days_15-no_robot)
rstudio::viewData(`days_15-no_robot`)
days_15_no_robots <- read.csv("~/Desktop/PROYECTO_TESIS/ProgramasPythonParaTesis/data/day_2011_10_to_24/u_ex111110_to_24-FINAL-2013-02-25-(NODOS-NODUP)-2013-02-25-(RECORRIDOS)-2013-02-25.csv")
viewData(days_15_no_robots)
rstudio::viewData(days_15_no_robots)
rstudio::viewData(days_15_no_robots)
attach(days_15_no_robots)
Total_Nodes
Total_nodes
hist(Total_nodes)
total = sort(Total_nodes)
total
total = sort(Total_nodes, decreasing = T)
total
days_15_before <- read.csv("~/Desktop/PROYECTO_TESIS/ProgramasPythonParaTesis/data/day_2011_10_to_24/u_ex111110_to_24-FINAL--2013-02-15-(NO_ROBOTS)-2013-02-19-(NODOS-NODUP)-2013-02-21-(RECORRIDOS)-2013-02-21.csv")
viewData(days_15_before)
attach(days_15_before)
total = sort(Total_nodes)
total = sort(Total_nodes, decreasing = T)
total
attach(days_15_no_robots)
total = sort(Total_nodes, decreasing = T)
total
rstudio::viewData(days_15_no_robots)
rstudio::viewData(days_15_no_robots)
attach(days_15_no_robots)
total = sort(Total_nodes, decreasing = T)
total
archivito <- read.delim("~/TheRBook/archivito.txt")
viewData(archivito)
rstudio::viewData(archivito)
rstudio::viewData(archivito)
rstudio::viewData(archivito)
archivito <- read.table("~/TheRBook/archivito.txt", header=T, quote="\"")
viewData(archivito)
rstudio::viewData(archivito)
rstudio::viewData(archivito)
attach(archivito)
one
archivito$one
archivito$uno
archivito$tres
archivito[one == uno]
archivito[one]
archivito["one"]
archivito$"one"
archivito["one", ]
archivito[,'tres']
data <- read.delim("~/TheRBook/daphnia.txt")
viewData(data)
rstudio::viewData(data)
rstudio::viewData(data)
attach(data)
names(data)
tapply(Growth.rate, Detergent, mean)
tapply(Growth.rate,Daphnia,mean)
tapply(Growth.rate,list(Daphnia,Detergent),mean)
N = 1000
tot_dist = 0
for i in (1:10):
for (i in (1:10)):
for (i in 1:10):
for i in (1:10) {}
for i in (1:10) {
1:10
for (i in 1:10) {
tot_dist = tot_dist + runif(10)
}
fix(tot_dist)
fix(tot_dist)
runif(10)
runif()
runif(1)
for (i in 1:10) {
tot_dist = tot_dist + runif(1)
}
fix(tot_dist)
sum(tot_dist)/10
runif(1)
runif(1)
runif(1)
runif(1)
runif(1)
for (i in 1:10) {
tot_dist = tot_dist + runif(1)
}
total = sum(tot_dist)
total
total/10
fix(tot_dist)
for (i in 1:10) {
tot_dist = runif(1)
}
for (i in 1:10) {
tot_dist[i] = runif(1)
}
fix(tot_dist)
total = sum(tot_dist)
total/10
for (i in 1:10) {
tot_dist[i] = runif(1)*2
}
total = sum(tot_dist)
total/10
N = 10000
for (i in 1:N) {
+ tot_dist[i] = runif(1)*2
+ }
> total = sum(tot_dist)
> total/N
N = 10000
for (i in 1:N) {
+ tot_dist[i] = runif(1)*2
+ }
> total = sum(tot_dist)
> total/N
N = 10000
for (i in 1:N) {
+ tot_dist[i] = runif(1)*2
+ }
total = sum(tot_dist)
total/N
N = 10000
for (i in 1:N) {
+ tot_dist[i] = runif(1)*2
+ }
total = sum(tot_dist)
total
N = 10000
for (i in 1:N) {
+ tot_dist[i] = runif(1)*2
+ }
total = sum(tot_dist)
total
N = 10000
for (i in 1:N) {
+ tot_dist[i] = runif(1)*2
+ }
total = sum(tot_dist)
total
N = 10000
for (i in 1:N) {
+ tot_dist[i] = runif(1)*2
+ }
total = sum(tot_dist)
total
seed(runif(1)*10)
N = 10000
for (i in 1:N) {
+ tot_dist[i] = runif(1)*2
+ }
total = sum(tot_dist)
total
seed(runif(1)*10)
N = 10000
for (i in 1:N) {
+ tot_dist[i] = runif(1)*2
+ }
total = sum(tot_dist)
total
seed(runif(1)*10)
N = 10000
for (i in 1:N) {
+ tot_dist[i] = runif(1)*2
+ }
total = sum(tot_dist)
total
fix(tot_dist)
seed(runif(1)*10)
N = 10000
for (i in 1:N) {
+ tot_dist[i] = runif(1)*2
+ }
total = sum(tot_dist)
total
seed(runif(1)*10)
N = 10000
for (i in 1:N) {
tot_dist[i] = runif(1)*2
}
total = sum(tot_dist)
total
1:N
seed(runif(1)*10)
N = 10000
for (i in 1:N) { tot_dist[i] = runif(1)*2 }
total = sum(tot_dist)
total
seed(runif(1)*10)
N = 10000
for (i in 1:N) { tot_dist[i] = runif(1)*2 }
tot_dist = 0
for (i in 1:N) { tot_dist[i] = runif(1)*2 }
total = sum(tot_dist)
total/N
N = 10000
tot_dist = 0
for (i in 1:N) { tot_dist[i] = runif(1)*2 }
total = sum(tot_dist)
total/N
tot_dist = 0
for (i in 1:N) { tot_dist[i] = runif(1)*2 }
total = sum(tot_dist)
total/N
N = 10000
tot_dist = 0
for (i in 1:N) { tot_dist[i] = runif(1)*2 }
total = sum(tot_dist)
dist = total/N
dist
N = 10000
tot_dist = 0
for (i in 1:N) { tot_dist[i] = runif(1)*2 }
total = sum(tot_dist)
dist = total/N
dist
N = 10000
tot_dist = 0
for (i in 1:N) { tot_dist[i] = runif(1)*2 }
total = sum(tot_dist)
dist = total/N
dist
N = 10000
tot_dist = 0
tot_dist = runif(1)*2
total = sum(tot_dist)
dist = total/N
dist
N = 10000
tot_dist = 0
tot_dist = runif(N)*2
total = sum(tot_dist)
dist = total/N
dist
N = 10000
tot_dist = 0
tot_dist = runif(N)*2
total = sum(tot_dist)
dist = total/N
dist
N = 10000
tot_dist = 0
tot_dist = runif(N)*2
total = sum(tot_dist)
dist = total/N
dist
fix(tot_dist)
N = 10000
tot_dist = 0
tot_dist = runif(N, 0, 1)*2
total = sum(tot_dist)
dist = total/N
dist
N = 10000
tot_dist = 0
tot_dist = runif(N, 0, 1)*2
total = sum(tot_dist)
dist = total/N
dist
N = 10000
tot_dist = 0
tot_dist = runif(N, 0, 1)*2
total = sum(tot_dist)
dist = total/N
dist
N = 10000
tot_dist = 0
tot_dist = runif(N, 0, 1)*2
total = sum(tot_dist)
dist = total/N
dist
(x5 <- sample(1:54, 10, replace=F))
(x5 <- sample(1:54, 10, replace=F))
(x5 <- sample(1:54, 10, replace=F))
(x5 <- sample(1:54, 10, replace=F))
(x5 <- sample(1:54, 10, replace=F))
X = SAMPLE(10)
x = sample(10)
x
x = sample(10, size = 10, replace = TRUE)
x
x = sample(10, size = 10, replace = TRUE)
x
x = sample(10, size = 10, replace = TRUE)
x
typeof(x)
x[0]
x[0,]
x[,0]
x[0,0]
x = c(sample(10, size = 10, replace = TRUE))
x
x[0]
worms = read.table("worms.txt", header = T)
View(worms)
View(worms)
attach(worms)
Slope
names
names(wworms)
names(wwrms)
names(worms)
summary(worms)
fivenum(worms)
by(worms, Vegetation, mean)
by(worms, Vegetation, mean)
attach(worms)
by(worms, Vegetation, mean)
Vegetation
worms = read.table("worms2.txt", header = T)
attach(worms)
View(worms)
View(worms)
by(worms, Vegetation, mean)
summary(worms)
worms[3,5]
worms[14:19, 7]
worms[1:5, 2:3]
worms[3,]
worms[3,*]
worms[3,]
worms[, c(1,5)]
worms[sample(1:20, 8),]
worms[t=sample(1:20, 8),]
worms[order(Slope),]
worms[order(Slope, decreasing = T),]
worms[Damp == T]
worms[Damp == T,]
worms[Worm.density > median(Worm.density) & Soil.pH < 5.2, ]
worms[, sapply(worms, is.numeric)]
worms[, sapply(worms, is.factor)]
data = read.table("worms.missing.txt", header = T)
attach(data)
View(data)
View(data)
na.omit(data)
