steps = read.table('steps.csv', header=TRUE, sep=",")
View(steps)
summary(steps)
attach(steps)
summary(entries)
plot(date, entries)
boxplot(entries)
boxplot(entries, main = "boxplot de pasos por d√≠a")
IQR(entries)
IQR(entries)
IQR(entries)
quartile(entries)
quantile(entries)
histogram(entries)
hist(entries)
hist(entries, main="Histogram of steps in a year (2014)")
c = seq(1:364)
c
hist(entries, main="Histogram of steps in a year (2014)", breaks = c)
c = seq(1:365)
hist(entries, main="Histogram of steps in a year (2014)", breaks = c)
c
hist(entries, main="Histogram of steps in a year (2014)", breaks = c)
hist(entries, main="Histogram of steps in a year (2014)", freq = TRUE)
hist(entries, main="Histogram of steps in a year (2014)")
hist(entries, main="Histogram of steps in a year (2014)", breaks = 1)
hist(entries, main="Histogram of steps in a year (2014)")
hist(entries, main="Histogram of steps in a year (2014)")
="Histogram of steps in a year (2014)")
c = seq(from=2, to
hist(entries, main="Histogram of steps in a year (2014)")
c = seq(from=2, to= 457, by=5)
c
hist(entries, main="Histogram of steps in a year (2014)", breaks = c)
summary(steps)
hist(entries)
hist(entries, main="Histogram of steps in a year (2014)")
hist(entries, main="Histogram of steps in a year (2014)", breaks = c)
plot(entries, type = "h", xlab = "steps", ylab = "W[k]",
)
plot(entries, type = "h", xlab = "steps", ylab = "W[k]", main = attr(entries,"name"))
plot(entries, type = "h", xlab = "steps", ylab = "W[k]", main = attr(entries,"name"))
spectrum(sunspot.year, kernel=kernel("daniell", c(11,7,3)), log="no")
k1 <- kernel("daniell", 50)  # a long moving average
k2 <- kernel("daniell", 10)  # and a short one
plot(k1)
plot(k2)
x1 <- kernapply(x, k1)
x2 <- kernapply(x, k2)
plot(x)
lines(x1, col = "red")    # go long if the short crosses the long upwards
lines(x2, col = "green")  # and go short otherwise
k1 <- kernel("daniell", 50)  # a long moving average
k2 <- kernel("daniell", 2)  # and a short one
plot(k1)
plot(k2)
x1 <- kernapply(x, k1)
x2 <- kernapply(x, k2)
plot(x)
lines(x1, col = "red")    # go long if the short crosses the long upwards
lines(x2, col = "green")  # and go short otherwise
k1 <- kernel("daniell", 50)  # a long moving average
k2 <- kernel("daniell", 2)  # and a short one
plot(k1)
plot(k2)
x1 <- kernapply(x, k1)
x2 <- kernapply(x, k2)
plot(x)
lines(x1, col = "red")    # go long if the short crosses the long upwards
lines(x2, col = "green")  # and go short otherwise
k1 <- kernel("daniell", 50)  # a long moving average
k2 <- kernel("daniell", 2)  # and a short one
plot(k1)
plot(k2)
x1 <- kernapply(x, k1)
x2 <- kernapply(x, k2)
plot(x)
lines(x1, col = "red")    # go long if the short crosses the long upwards
lines(x2, col = "green")  # and go short otherwise
x2 <- kernapply(x, k2)
k1 <- kernel("daniell", 50)  # a long moving average
k2 <- kernel("daniell", 2)  # and a short one
plot(k1)
plot(k2)
x1 <- kernapply(entries, k1)
x2 <- kernapply(entries, k2)
plot(entries)
lines(x1, col = "red")    # go long if the short crosses the long upwards
lines(x2, col = "green")  # and go short otherwise
k1 <- kernel("daniell", 50)  # a long moving average
k2 <- kernel("daniell", 10)  # and a short one
plot(k1)
plot(k2)
x1 <- kernapply(entries, k1)
x2 <- kernapply(entries, k2)
plot(entries)
lines(x1, col = "red")    # go long if the short crosses the long upwards
lines(x2, col = "green")  # and go short otherwise
k1 <- kernel("daniell", 50)  # a long moving average
k2 <- kernel("daniell", 10)  # and a short one
plot(k1)
plot(k2)
x1 <- kernapply(entries, k1)
x2 <- kernapply(entries, k2)
plot(entries)
lines(x1, col = "red")    # go long if the short crosses the long upwards
lines(x2, col = "green")  # and go short otherwise
plot(date, entries)
steps = read.table('steps.csv', header=TRUE, sep=",")
summary(steps)
attach(steps)
plot(date, entries)
days = seq(1:365)
days
plot(days, entries)
plot(days, entries, type = "h")
boxplot(entries, main = "Boxplots of steps per day (one year)", ylenght=365)
boxplot(entries, main = "Boxplots of steps per day (one year)", ylenght=365)
plot(days, entries, type = "h", ylenght=365)
plot(days, entries, type = "h", xlim = c(1,=365))
plot(days, entries, type = "h", xlim = c(1,365))
plot(days, entries, type = "h", xlim = c(1,365))
plot(days, xlab = "(365 days)", entries, type = "h", xlim = c(1,365))
plot(days, entries, type = "s", xlim = c(1,365))
plot(days, xlab = "days (365)", entries, ylab = "entries (steps in a day)",
type = "s", xlim = c(1,365))
plot(days, xlab = "days (365)", entries, ylab = "entries (steps in a day)",
type = "s", xlim = c(1,365), main= "Steps per day in a year")
total_entries = sum(entries)
total_entries
entries_standarized = entries/total_entries
hist(entries_standarized, main="Histogram of steps in a year (2014)", breaks = c)
hist(entries_standarized, main="Histogram of steps in a year (2014)")
hist(entries, main="Histogram of steps in a year (2014)", breaks = c)
entries_standarized
results = hist(entries, main="Histogram of steps in a year (2014)", breaks = c)
results
results$intensities
results$counts, results$intensities
intensities = c(results$counts, results$intensities)
intensities = data.frame(results$counts, results$intensities)
View(intensities)
PMF = data.frame(results$breaks, results$counts, results$intensities)
PMF = data.frame(results$breaks, results$counts, results$intensities)
results
PMF = data.frame(results$mids, results$counts, results$intensities)
View(PMF)
plot(results$mids, results$intensities)
line(results$mids, results$intensities)
PMF = data.frame(results$mids, results$counts, results$densities)
PMF = data.frame(results$mids, results$counts, results$intensities)
results
attach(results)
lenght(intensities)
lenght(results$intensities)
length(results$intensities)
length(results$densities)
results$densities
results = hist(entries, main="Histogram of steps in a year (2014)", breaks = c)
results$densities
results
PMF = data.frame(results$mids, results$counts, results$density)
View(PMF)
View(PMF)
plot(results$mids, results$density, type="l")
plot(results$mids, results$density, type="l")
plot(results$mids, results$density)
plot(results$mids, results$density, type="l", col="blue")
results
sum(results$density)
results$density
sum(results$density*results$mids)
sum(results$density*results$counts)
sum(results$density*results$counts/length(results$mids))
sum(results$intensities)
sum(results$density*results$counts)
results$density*results$counts
results$density*results$mids
type(results$mids)
results$mids
results$mids[1]
results$mids[79]
results$mids[-79]
length(results$mids)
length(results$mids[-91])
length(results$counts)
summary(steps)
View(steps)
View(steps)
c = seq(from=0, to= 457, by=5)
c
c = seq(from=5, to= 457, by=5)
c
hist(entries, main="Histogram of steps in a year (2014)", breaks = c)
c = seq(from=5, to= 460, by=5)
c
hist(entries, main="Histogram of steps in a year (2014)", breaks = c)
c = seq(from=0, to= 457, by=5)
hist(entries, main="Histogram of steps in a year (2014)", breaks = c)
c
c = seq(from=0, to= 460, by=5)
c
length(c)
c = seq(from=0, to= 457, by=1)
hist(entries, main="Histogram of steps in a year (2014)", breaks = c)
length(c)
results = hist(entries, main="Histogram of steps in a year (2014)", breaks = c)
ressults
results
results = hist(entries, main="Histogram of steps in a year (2014)", breaks = c)
length(results$counts)
length(results$cdensity)
length(results$density)
sum(results$density * results$counts)
View(PMF)
View(PMF)
results$mids
results$counts
plot(results$mids, results$density)
plot(results$mids, results$density, type="l", col="blue")
c = seq(from=2, to= 457, by=5)
hist(entries, main="Histogram of steps in a year (2014)", breaks = c)
# Obtaining the discrete probability distribution (PMF)
# 'results' is an object of class histogram" with several properties,
# namely: breaks, counts, density, mids,
results = hist(entries, main="Histogram of steps in a year (2014)", breaks = c)
PMF = data.frame(results$mids, results$counts, results$density)
plot(results$mids, results$density)
plot(results$mids, results$density, type="l", col="blue")
## Esto no da 1 !!
sum(results$density)
results$counts
View(steps)
sample(steps$entries, 1, replace = TRUE, results$density)
sample(steps$entries, 1, replace = TRUE)
sample(steps$entries, 1, replace = TRUE)
sample(steps$entries, 1, replace = TRUE)
sample(steps$entries, 1, replace = TRUE)
sample(steps$entries, 1, replace = TRUE)
sample(steps$entries, 1, replace = TRUE)
sample(steps$entries, 1, replace = TRUE)
sample(steps$entries, 1, replace = TRUE)
sample(steps$entries, 30, replace = TRUE)
sample(steps$entries, 30, replace = TRUE)
sample(steps$entries, 30, replace = TRUE)
sample(steps$entries, 30, replace = TRUE)
sample(steps$entries, 30, replace = TRUE)
sample(steps$entries, 30, replace = TRUE)
sample(steps$entries, 30, replace = TRUE)
sample(steps$entries, size = 1, replace = TRUE)
sample(steps$entries, size = 1, replace = TRUE)
sample(steps$entries, size = 1, replace = TRUE)
sample(steps$entries, size = 1, replace = TRUE)
sample(steps$entries, size = 1, replace = TRUE)
sample(steps$entries, size = 1, replace = TRUE)
sample(steps$entries, size = 1, replace = TRUE)
sample(steps$entries, size = 1, replace = TRUE)
sample(steps$entries, size = 1, replace = TRUE)
sample(steps$entries, size = 30, replace = TRUE)
sample(steps$entries, size = 30, replace = TRUE)
sample(steps$entries, size = 30, replace = TRUE)
sample(steps$entries, size = 30, replace = TRUE)
sample(steps$entries, size = 30, replace = TRUE)
sample(steps$entries, size = 30, replace = TRUE)
sample(steps$entries, size = 30, replace = TRUE)
jan = sample(steps$entries, size = 30, replace = TRUE)
dec = sample(steps$entries, size = 31, replace = TRUE)
new_year_2015 = data.frame(jan, dec)
new_year_2015 = c(jan, dec)
View(steps)
View(steps)
days_of_2015 = seq(as.Date("2015-01-01"), as.Date("2015-12-31"), by="days")
days_of_2015
jan = sample(steps$entries, size = 30, replace = TRUE)
feb = sample(steps$entries, size = 31, replace = TRUE)
new_year_2015 = c(jan, dec)
days_of_2015 = seq(as.Date("2015-01-01"), as.Date("2015-02-31"), by="days")
new_year_2015 = data.frame(days_of_2015, new_year_2015)
jan = sample(steps$entries, size = 30, replace = TRUE)
feb = sample(steps$entries, size = 31, replace = TRUE)
new_year_2015 = c(jan, feb)
days_of_2015 = seq(as.Date("2015-01-01"), as.Date("2015-02-31"), by="days")
new_year_2015 = data.frame(days_of_2015, new_year_2015)
# Hint:
jan = sample(steps$entries, size = 30, replace = TRUE)
feb = sample(steps$entries, size = 31, replace = TRUE)
new_year_2015 = c(jan, feb)
days_of_2015 = seq(as.Date("2015-01-01"), as.Date("2015-02-31"), by="days")
days_of_2015 = seq(as.Date("2015-01-01"), as.Date("2015-02-31"), by="days")
days_of_2015 = seq(as.Date("2015-01-01"), as.Date("2015-02-31"), by="days")
days_of_2015 = seq(as.Date("2015-01-01"), as.Date("2015-02-31"), by="days")
itemizeDates <- function(startDate="15-01-01", endDate="15-02-01",
format="%y-%m-%d") {
out <- seq(as.Date(startDate, format=format),
as.Date(endDate, format=format), by="days")
format(out, format)
}
d = itemizeDates(startDate="15-01-01", endDate="15-02-01")
d
e = seq(as.Date("2000/1/1"), by = "month", length.out = 12)
e
e = seq(as.Date("2015/1/1"), by = "month", length.out = 12)
e
e = seq(as.Date("2015/1/1"), by = "days", length.out = 365)
e
jan = sample(steps$entries, size = 30, replace = TRUE)
feb = sample(steps$entries, size = 31, replace = TRUE)
new_year_2015 = c(jan, feb)
days_of_2015 = seq(as.Date("2015/1/1"), by = "days", length.out = 61)
new_year_2015 = data.frame(days_of_2015, new_year_2015)
new_year_2015
View(new_year_2015)
View(new_year_2015)
View(new_year_2015)
View(new_year_2015)
View(new_year_2015)
View(new_year_2015)
names(new_year_2015) = c("date", "entries")
View(new_year_2015)
View(new_year_2015)
View(steps)
View(steps)
days_of_2015 = seq(as.Date("1/1/2015"), by = "days", length.out = 61)
new_year_2015 = data.frame(days_of_2015, new_year_2015)
# Change names to columns (such as the original steps dataframe)
names(new_year_2015) = c("date", "entries")
View(new_year_2015)
View(new_year_2015)
jan = sample(steps$entries, size = 30, replace = TRUE)
feb = sample(steps$entries, size = 31, replace = TRUE)
new_year_2015 = c(jan, feb)
days_of_2015 = seq(as.Date("2015/01/01"), by = "days", length.out = 61)
new_year_2015 = data.frame(days_of_2015, new_year_2015)
# Change names to columns (such as the original steps dataframe)
names(new_year_2015) = c("date", "entries")
View(new_year_2015)
View(new_year_2015)
jan = sample(steps$entries, size = 30, replace = TRUE)
feb = sample(steps$entries, size = 28, replace = TRUE)
new_year_2015 = c(jan, feb)
days_of_2015 = seq(as.Date("2015/01/01"), by = "days", length.out = 58)
new_year_2015 = data.frame(days_of_2015, new_year_2015)
# Change names to columns (such as the original steps dataframe)
names(new_year_2015) = c("date", "entries")
View(new_year_2015)
jan = sample(steps$entries, size = 30, replace = TRUE)
feb = sample(steps$entries, size = 28, replace = TRUE)
new_year_2015 = c(jan, feb)
days_of_2015 = seq(as.Date("2015/01/01"), by = "days", length.out = 59)
new_year_2015 = data.frame(days_of_2015, new_year_2015)
# Change names to columns (such as the original steps dataframe)
names(new_year_2015) = c("date", "entries")
jan = sample(steps$entries, size = 31, replace = TRUE)
feb = sample(steps$entries, size = 28, replace = TRUE)
new_year_2015 = c(jan, feb)
days_of_2015 = seq(as.Date("2015/01/01"), by = "days", length.out = 59)
new_year_2015 = data.frame(days_of_2015, new_year_2015)
# Change names to columns (such as the original steps dataframe)
names(new_year_2015) = c("date", "entries")
View(new_year_2015)
View(new_year_2015)
qt(p=0.05, df=9,)
qt(p=0.05, df=9,lower.tail = TRUE, log.p = FALSE)
qt(p=0.05, df=9,lower.tail = FALSE, log.p = FALSE)
